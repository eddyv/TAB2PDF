package tab2pdf;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;

import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
import org.icepdf.ri.util.PropertiesManager;

import com.itextpdf.text.DocumentException;

import javax.swing.*;

import java.util.ResourceBundle;

public class GUI_Main {

	private JFrame frmTabpdf;
	private String src;
	private String dest;
	private JTextField txtSpacing;
	private double spacing;
	private String title;
	private JTextField txtTitle;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUI_Main window = new GUI_Main();
					window.frmTabpdf.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public GUI_Main() { 
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmTabpdf = new JFrame();
		frmTabpdf.setTitle("TAB2PDF");
		frmTabpdf.getContentPane().setFont(new Font("Times New Roman", Font.PLAIN, 11));
		frmTabpdf.getContentPane().setLayout(null);
		
		
		
		JButton btnConvertToPdf = new JButton("Convert to PDF");
		btnConvertToPdf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				openPdf();
			}

			
		});
		btnConvertToPdf.setBounds(484, 135, 228, 163);
		frmTabpdf.getContentPane().add(btnConvertToPdf);
		JButton btnLoadTextFile = new JButton("Load text file");
		btnLoadTextFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		btnLoadTextFile.setBounds(63, 135, 228, 163);
		frmTabpdf.getContentPane().add(btnLoadTextFile);
		
		
		frmTabpdf.setBounds(100, 100, 450, 300);
		frmTabpdf.setSize(800,600);
		frmTabpdf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JMenuBar menuBar = new JMenuBar();
		frmTabpdf.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmConvert = new JMenuItem("Convert to PDF");
		mntmConvert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//converting stuff to pdf.
			}
		});
		
		JMenuItem mntmSave = new JMenuItem("Load text file");
		mnFile.add(mntmSave);
		mnFile.add(mntmConvert);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnFile.add(mntmExit);
	}
	private void openPdf() {
				dest = SaveFile();
				try 
				{
					new drawOutput(src,dest);
				} catch (IOException | DocumentException e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// build a component controller
		        SwingController controller = new SwingController();
		        controller.setIsEmbeddedComponent(true);

		        PropertiesManager properties = new PropertiesManager(
		                System.getProperties(),
		                ResourceBundle.getBundle(PropertiesManager.DEFAULT_MESSAGE_BUNDLE));

		        properties.set(PropertiesManager.PROPERTY_DEFAULT_ZOOM_LEVEL, "1.75");

		        SwingViewBuilder factory = new SwingViewBuilder(controller, properties);

		        // add interactive mouse link annotation support via callback
		        controller.getDocumentViewController().setAnnotationCallback(
		                new org.icepdf.ri.common.MyAnnotationCallback(controller.getDocumentViewController()));
		        JPanel viewerComponentPanel = factory.buildViewerPanel();
		        JFrame applicationFrame = new JFrame();
		        applicationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		        applicationFrame.getContentPane().add(viewerComponentPanel);
		        // Now that the GUI is all in place, we can try opening a PDF
		        controller.openDocument(dest);
		        // show the component
		        applicationFrame.pack();
		        applicationFrame.setVisible(true);
			}
	private String SaveFile()
	{
		JFileChooser fc = new JFileChooser();
		FileFilter pdfFilter = new ExtensionFilter("Pdf file", ".pdf");
		fc.setFileFilter(pdfFilter);
		int status = fc.showSaveDialog(null);
		File in = new File();
		if(status == JFileChooser.APPROVE_OPTION)
		{
			in = fc.getSelectedFile();
		}
		return in.getPath();
	}
	private String OpenFile()
	{
		JFileChooser fc = new JFileChooser();
		FileFilter textFilter = new ExtensionFilter("Text file", ".txt");
		//fc.addChoosableFileFilter(textFilter);
		fc.setFileFilter(textFilter);
		int status = fc.showOpenDialog(null);
		if(status == JFileChooser.APPROVE_OPTION)
		{
			out = fc.getSelectedFile();
			//DoStuff();
		}
		return out.getPath();
	}
}
